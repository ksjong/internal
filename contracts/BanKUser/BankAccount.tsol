// SPDX-License-Identifier: UNLICENSED
pragma ever-solidity >= 0.62.0;
import "Bank.tsol";
//import "locklift/src/console.tsol";

contract BankAccount {
    uint public money;
    uint128 constant MIN_CONTRACT_BALANCE = 1 ever;

    address static bankAddress;
    address static owner;


    event BorrowedMoney(address user, uint _amount);
    event LoanRepay(address user, uint repayAmount);

    event receivedSuccess(uint _loanNum);
    event repaySuccess(uint _totalRepayAmount);
    event RepayRejected(string message);

    event SendMoney(uint money, address sender);
    event ReceivedMoney(uint money, address sender);

    modifier onlyOwner() {
        require(msg.sender == owner, 1011);
        _;
    }

    constructor(uint128 _initialBalance) public {
        money = _initialBalance;
    }



    function borrowMoney(uint _amount) external {
        tvm.rawReserve(MIN_CONTRACT_BALANCE, 0);
        emit BorrowedMoney(msg.sender, _amount);
        Bank(bankAddress).loan{value:0, flag:128}(_amount, msg.sender);
    }

    function loanReceived(uint _loanNum) external {
        tvm.rawReserve(MIN_CONTRACT_BALANCE, 0);
        money += _loanNum;
        emit receivedSuccess( _loanNum);
        owner.transfer({value:0, flag:128});
    }

    function repayLoan(uint128 _repayAmount) external {
        tvm.rawReserve(MIN_CONTRACT_BALANCE,0);
        require(money >= _repayAmount, 1005);
        emit LoanRepay(msg.sender, _repayAmount);
        Bank(bankAddress).repaying{value:0, flag:128}(_repayAmount, msg.sender);

    }

    function repayAccepted(uint _totalRepayAmount) external {
        tvm.rawReserve(MIN_CONTRACT_BALANCE,0);
        require(_totalRepayAmount <= money, 1008);
        money -= _totalRepayAmount;
        emit repaySuccess(_totalRepayAmount);
        owner.transfer({value:0, flag:128});
    }

    function repayRejected() external {
        tvm.rawReserve(MIN_CONTRACT_BALANCE, 0);
        emit RepayRejected("Reject!");
        owner.transfer({value:0, flag:128});
    }

    function sendMoneyToUser(uint _money, address _destAddress) external onlyOwner{
        tvm.rawReserve(MIN_CONTRACT_BALANCE, 0);
        require(money >= _money, 2000);
        money -= _money;
        BankAccount(_destAddress).receivedMoneyFromUser{value:0, flag:128}(_money, bankAddress);
        emit SendMoney(_money, msg.sender);
    }

    function receivedMoneyFromUser(uint _money, address _bankAddress) external {
        tvm.rawReserve(MIN_CONTRACT_BALANCE, 0);
        require(bankAddress == _bankAddress, 2001);
        money+= _money;

        emit ReceivedMoney(_money, msg.sender);
        msg.sender.transfer({value:0, flag:128});
    }

    function getMoney() external view returns (uint _money){
        _money = money;
    }
}
